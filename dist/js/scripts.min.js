/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = d3;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isLetter;
/* harmony export (immutable) */ __webpack_exports__["b"] = loadJson;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);


/**
 * @param {string} char
 * @return {bool}
 */
function isLetter(char) {
	return (typeof char === 'string') && char.toLowerCase() != char.toUpperCase();
}

/**
 * Promise wrapper around d3.json
 * @param {string} path
 * @return {Promise}
 */
function loadJson(path) {
	return new Promise(function(resolve, reject) {
		__WEBPACK_IMPORTED_MODULE_0_d3__["json"](path, function(error, response) {
			if (error) {
				reject(error);
			}

			resolve(response);
		});
	});
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = Cookies;

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getMoveString;
/* harmony export (immutable) */ __webpack_exports__["b"] = getMoveThrowBreak;
/* harmony export (immutable) */ __webpack_exports__["d"] = moveHasSpin;
/* harmony export (immutable) */ __webpack_exports__["c"] = moveHasArmor;
/* harmony export (immutable) */ __webpack_exports__["e"] = moveHasTracking;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(1);


// impure
function getMoveString(move, lang, ctrlsMap) {
    let moveString = "";
	let commands = move.command[lang].split(" ");

	for (let c = 0; c < commands.length; c++) {
		let command = commands[c];

		if (/[a-z]/.test(command.toLowerCase())) {
			//html_string += "<p class=\"move-hint\">"+ command + "</p>";
		} else {
			for (let m = 0; m < command.length; m++) {
				let input = "";
				try {
					if (Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* isLetter */])(ctrlsMap[command.charAt(m)])) {
						if (
							ctrlsMap[command.charAt(m)] === ctrlsMap[command.charAt(m)].toLowerCase() ||
							ctrlsMap[command.charAt(m)] === "N"
						) {
							input = ctrlsMap[command.charAt(m)].toLowerCase();
						} else {
							input = ctrlsMap[command.charAt(m)].toLowerCase();
						}
					} else if (!isNaN(ctrlsMap[command.charAt(m)].charAt(0))) {
						input = ctrlsMap[command.charAt(m)];
					}
				} catch (exception) {
				}

				moveString += input;
			}
		}
	}

	return moveString;
}

function getMoveThrowBreak(move) {
	switch (move.br[0].b) {
        case 1:
            return "1";
        case 2:
            return "2";
        case 3:
            return "1/2";
        case 4:
            return "1+2";
        default:
            return "";
    }
}

function moveHasSpin(move) {
	return move.b9;
}

function moveHasArmor(move) {
	return move.b8;
}

function moveHasTracking(move) {
	return move.bB;
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cookies__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cookies___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cookies__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__view_js__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__filters_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__state_js__ = __webpack_require__(7);
/*!
 * =============================
 * =	Mike Pinto             =
 * =	mspkvp@github.com      =
 * =	Â©2017 tk7movespretty   =
 * ============================= */







(function(exports) {
'use strict';

let state = new __WEBPACK_IMPORTED_MODULE_5__state_js__["a" /* default */]();

function setLang(val) {
	let lang = parseInt(val);
	let jap;
	let langIndex;

	if (lang === 0) {
		jap = true;
	} else {
		jap = false;
	}

	__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#lang-select").selectAll("option").each(function() {
		if (parseInt(this.value) === lang) {
			langIndex = this.index;
		}
	});

	state.set('lang', lang);
	state.set('jap', jap);
	state.set('langIndex', langIndex);
	state.save();

	fetchMoveList(state.get('selectedCharacter'));
}

function selectCharacter(index) {
	// remove other moves
	__WEBPACK_IMPORTED_MODULE_0_d3__["select"](".move-table").remove();
	__WEBPACK_IMPORTED_MODULE_0_d3__["select"](".char-movelist .inner-table").html("<table class=\"move-table\"></table>");

	// de-select card
	let characterData     = state.get('characterData');
	let selectedCharacter = index;
	let id_string         = characterData[selectedCharacter].c.split(" ");

	__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#" + id_string[0]).classed("selected", false);
	__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#" + id_string[0]).classed("selected", true);
	__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#selected-title").text(characterData[selectedCharacter].n);

	state.set('selectedCharacter', selectedCharacter);
	state.save();

	if (state.get('showCharMenuDialog')) {
		toggleCharMenu();
	}
}

function togglePreferences() {
	let showPrefDialog = state.get('showPrefDialog');

	if (showPrefDialog) {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#preferences").style('visibility', 'hidden');
	} else {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#preferences").style('visibility', 'visible');
	}

	state.set('showPrefDialog', !showPrefDialog);
}

function toggleFilter() {
	let showFilterDialog = state.get('showFilterDialog');

	if (showFilterDialog) {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#filter").style('visibility', 'hidden');
	} else {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#filter").style('visibility', 'visible');
	}

	state.set('showFilterDialog', !showFilterDialog);
}

function toggleCharMenu() {
	let showCharMenuDialog = state.get('showCharMenuDialog');

	if (showCharMenuDialog) {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#charmenu").style('display', 'none');
	} else {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#charmenu").style('display', 'initial');
	}

	state.set('showCharMenuDialog', !showCharMenuDialog);
}

function changePlatform(index) {
	state.set('buttonLayoutChoice', index);
	state.save();
	fetchMoveList(state.get('selectedCharacter'));
}

function importData() {
	state.load();

	Object(__WEBPACK_IMPORTED_MODULE_4__utils_js__["b" /* loadJson */])("./assets/data/map_hits.json").then(function(data) {
		let hitsMap = state.get('hitsMap');

		for(var h in data) {
			hitsMap[data[h].i] = data[h].h;
		}

		state.set('hitsMap', hitsMap);

		return Object(__WEBPACK_IMPORTED_MODULE_4__utils_js__["b" /* loadJson */])("./assets/data/map_ctrls.json");
	}).then(function(data) {
		state.set('ctrlsMap', data);

		return Object(__WEBPACK_IMPORTED_MODULE_4__utils_js__["b" /* loadJson */])("./assets/data/map_chars.json");
	}).then(function(data) {
		let selectedCharacter = state.get('selectedCharacter');
		let characterData = state.get('characterData');

		for (let h in data) {
			characterData[data[h].i] = {
				c: data[h].c,
				n: data[h].n
			};
		}

		state.set('characterData', characterData);

		for (let i = 0; i < data.length; i++) {
			let tname = data[i].c_index.split(" ");

			if (data[i].i == "11") {
				tname = data[i].c.split("-");
			}

			__WEBPACK_IMPORTED_MODULE_0_d3__["select"](".char-menu > .inner-table > table")
				.append("tr")
				.html("<td class=\"char-card\" id=\""+data[i].c.split(" ")[0]+"\"><img src=\"./assets/chars/"+tname.join("").toLowerCase()+"_thumbnail.png\"><p>"+data[i].c+"</p></td>");

			__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#"+data[i].c.split(" ")[0]).on("click", function() {
				fetchMoveList(data[i].i);
			});
		}

		let id_string = characterData[selectedCharacter].c.split(" ");
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#"+id_string[0]).classed("selected", true);
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#selected-title").text(characterData[selectedCharacter].n);

		fetchMoveList(selectedCharacter);
	});
}

function fetchMoveList(characterIndex) {
	Object(__WEBPACK_IMPORTED_MODULE_4__utils_js__["b" /* loadJson */])("./assets/data/movelists/MOVELIST_" + characterIndex + ".json")
	.then(function(data) {
		selectCharacter(characterIndex);
		let currentMoveList = data.moves;
		let hitsMap = state.get('hitsMap');
		let jap = state.get('jap');
		let lang = state.get('lang');
		let ctrlsMap = state.get('ctrlsMap');
		let buttonLayouts = state.get('buttonLayouts');
		let buttonLayoutChoice = state.get('buttonLayoutChoice');

		__WEBPACK_IMPORTED_MODULE_2__view_js__["a" /* renderMoveList */](characterIndex, currentMoveList, hitsMap, jap, lang, ctrlsMap, buttonLayouts[buttonLayoutChoice]);
	}).catch(function(error) {
		console.log("Failed to find movelist", error);
	});
}

function filterMoveList() {
	let currentMoveList = state.get('currentMoveList');
	let jap = state.get('jap');
	let lang = state.get('lang');
	let hitsMap = state.get('hitsMap');
	let ctrlsMap = state.get('ctrlsMap');
	let buttonLayouts = state.get('buttonLayouts');
	let buttonLayoutChoice = state.get('buttonLayoutChoice');
	let selectedCharacter = state.get('selectedCharacter');
	let filteredMoveList = __WEBPACK_IMPORTED_MODULE_3__filters_js__["a" /* filterMoveList */](currentMoveList, jap, lang, ctrlsMap);

	selectCharacter(selectedCharacter);
	__WEBPACK_IMPORTED_MODULE_2__view_js__["a" /* renderMoveList */](selectedCharacter, filteredMoveList, hitsMap, jap, lang, ctrlsMap, buttonLayouts[buttonLayoutChoice]);
}

exports.importData        = importData;
exports.toggleCharMenu    = toggleCharMenu;
exports.togglePreferences = togglePreferences;
exports.toggleFilter	  = toggleFilter;
exports.filterMoveList    = filterMoveList;
exports.setLang           = setLang;
exports.changePlatform    = changePlatform;

})(window);

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = renderMoveList;
/* unused harmony export renderSpecialMoveCard */
/* unused harmony export renderMoveCard */
/* unused harmony export renderMoveInfo */
/* unused harmony export renderMoveString */
/* unused harmony export renderMoveHitDamage */
/* unused harmony export renderMoveDamage */
/* unused harmony export renderThrowBreaks */
/* unused harmony export renderMoveFrames */
/* unused harmony export renderMoveExtra */
/* unused harmony export showHitDamageVisibilityOnMouseEnter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__move_js__ = __webpack_require__(3);




function renderMoveList(characterIndex, moves, hitsMap, jap, lang, ctrlsMap, buttonLayout) {
	let totalMoves = 0;

	for (let i = 0; i < moves.length; i++) {
		let move          = moves[i];
		let isSpecialMove = !move.number > 0;
		let tableRow      = __WEBPACK_IMPORTED_MODULE_0_d3__["select"](".move-table").append("tr");

		if (isSpecialMove) {
			tableRow.html(renderSpecialMoveCard(move, jap));
		} else {
			totalMoves++;
			tableRow.html(renderMoveCard(characterIndex, move, hitsMap, jap, lang, ctrlsMap, buttonLayout));
		}
	}

	// Hit damage
	showHitDamageVisibilityOnMouseEnter(totalMoves);

	// Scroll the list to the top
	let table = document.querySelector("#movelist_tab > table");
	let firstElementChild = table.firstElementChild;

	if (firstElementChild) {
		firstElementChild.scrollIntoView(true);
	}
}

function renderSpecialMoveCard(move, jap) {
	return `
    <td class="move-card">
        <div class="move-info">
            <div class="move-number">&#9733;</div>
	        <div class="move-title">
	            <div class="move-name" style="margin-bottom:5px;">
		            ${move.name[jap ? 0 : 1]}
                </div>
		    </div>
	    </div>
    </td>
	`;
}


// pure
function renderMoveCard(selectedCharacterIndex, move, hitsMap, jap, lang, ctrlsMap, buttonLayout) {
	return `
	<td class="move-card">
	    ${renderMoveInfo(selectedCharacterIndex, move, hitsMap, jap, lang, ctrlsMap, buttonLayout)}
	    ${renderMoveExtra(move)}
	</td>
	`;
}


// pure
function renderMoveInfo(selectedCharacterIndex, move, hitsMap, jap, lang, ctrlsMap, buttonLayout) {
	return `
    <div class="move-info">
        <div class="move-number">${move.number}</div>
		<div class="move-title">
		    <div class="move-name">${move.name[jap ? 0 : 1]}</div>
		    <div class="move-hitamount">${move.ds.length + (move.ds.length > 1 ? " Hits" : " Hit")}</div>
	    </div>
        ${renderMoveString(move, lang, ctrlsMap, buttonLayout)}
        ${renderMoveHitDamage(selectedCharacterIndex, move, hitsMap)}
    </div>
	`;
}

function renderMoveString(move, lang, ctrlsMap, buttonLayout) {
	let html_string = "<div class=\"move-string\">";
	let commands    = move.command[lang].split(" ");

	for (let c = 0; c < commands.length; c++) {
		let command = commands[c];

		if (/[a-z]/.test(command.toLowerCase())) {
			html_string += "<p class=\"move-hint\">"+ command + "</p>";
		} else {
			html_string += renderMoveCommand(command, ctrlsMap, buttonLayout);
		}
	}

	html_string += "</div>";

	return html_string;
}

function renderMoveCommand(command, ctrlsMap, buttonLayout) {
    let html_string = '';

    for (let m = 0; m < command.length; m++) {
		/** @todo extract this logic out */
		let input = ctrlsMap[command.charAt(m)];

		if (input && __WEBPACK_IMPORTED_MODULE_1__utils_js__["a" /* isLetter */](input)) {
			if (input === input.toLowerCase() || input === "N") {
				html_string += "<img class=\"move-arrow\" src=\"./assets/arrow/"+ input.toLowerCase() + ".svg\">";
			} else {
				html_string += "<img class=\"move-arrow\" src=\"./assets/arrow/"+ input.toLowerCase() + "p.svg\">";
			}
		} else if (input && !isNaN(input.charAt(0))) {
			html_string += "<img class=\"move-button\" src=\"./assets/button/"+ buttonLayout +"/"+ input +".svg\">";
		} else if (input === ">") {
			html_string += "<p class=\"move-hint\" style=\"color:#37ff05;font-size:20px;\"><i class=\"fa fa-chevron-right\" aria-hidden=\"true\"></i></p>";
		} else {
		    html_string += "<p class=\"move-hint\">"+ command.charAt(m) +"</p>";
		}
	}

	return html_string;
}

/**
 * @param selectedCharacterIndex
 * @param move
 * @param hitsMap
 * @return string
 */
function renderMoveHitDamage(selectedCharacterIndex, move, hitsMap) {
	return `
	<div class="move-hit-dmg">
	    <div class="move-hitlvlstring">
            ${renderMoveHitLevels(move, hitsMap)}
    	    ${move.br.length > 0 ? renderThrowBreaks(move) : ``}
	    </div>
	    ${renderMoveDamage(move)}
	</div>
	`;
}

function renderMoveHitLevels(move, hitsMap) {
	return move.at
	    .map((hit) => renderMoveHitLevel(hitsMap[hit.l], (hit.t > 0 ? "Throw" : "")))
	    .join(`<i class="fa fa-chevron-right" aria-hidden="true"></i>`);
}

function renderMoveHitLevel(hitLevel, hitType) {
    return `
    <p class="mv-hitlvl hit${hitLevel.toLowerCase()}">
		${hitLevel} ${hitType}
	</p>
	`;
}

function renderMoveDamage(move) {
    return `
    <div class="move-dmg">
        <p class="mv-frames">${move.d}</p>
        <p class="mv-id">Damage</p>
        <div class="move-hitdmg-section">
            <i id="dmgmove${move.number}" class="fa fa-plus-square" aria-hidden="true"></i>
            <div class="move-hitdmg">
                ${move.ds.map(damage => damage.d).join("+")}
            </div>
        </div>
    </div>
	`;
}

function renderThrowBreaks(move) {
	return `
    <i class="fa fa-caret-right" aria-hidden="true"></i>
	<p class="mv-hitlvl">
	    ${move.br[0].f}F BREAK ${__WEBPACK_IMPORTED_MODULE_2__move_js__["b" /* getMoveThrowBreak */](move)}
	</p>
	`
}

function renderMoveFrames(move) {
	return `
    <table class="move-frames">
		<tr class="move-startf">
		    <td class="mv-id">Start</td>
		    <td class="mv-frames">
		        ${move.s}F
	        </td>
        </tr>

        ${move.s > 0 ? renderStartFramesSegmented(move) : ""}

        <tr class="move-blockf">
            <td class="mv-id">Block</td>
            <td class="mv-frames ${move.blk > -1 ? "blkpositive" : move.blk < -10 ? "blknegative" : "blkmild"}">
                ${(move.blk > -1 ? "+" : "" ) + move.blk}
            </td>
        </tr>
        <tr class="move-hitf">
            <td class="mv-id">Hit</td>
            <td class="mv-frames">
        		${(move.adv > 0 ? "+" : "") + move.adv}
		    </td>
	    </tr>
    </table>
	`;
}

function renderStartFramesSegmented(move) {
    return `
    <tr class="move-startf-seg">
        <td>
            ${move.s}F = ${move.ss.slice(1).map(sfs => sfs.s).join("+")}
	    </td>
	</tr>`;
}

function renderMoveExtra(move) {
    return `
	<div class="move-extra">
	    <div class="mv-section">
	        <div class="move-special">
	            ${ __WEBPACK_IMPORTED_MODULE_2__move_js__["d" /* moveHasSpin */](move) ? `<p class="spin">SPIN</p>` : `` }
	            ${ __WEBPACK_IMPORTED_MODULE_2__move_js__["c" /* moveHasArmor */](move) ? `<p class="armor">ARMOR</p>` : `` }
	            ${ __WEBPACK_IMPORTED_MODULE_2__move_js__["e" /* moveHasTracking */](move) ? `<p class="track">TRACK</p>` : `` }
            </div>
            ${renderMoveFrames(move)}
        </div>
    </div>
	`;
}

/**
 * @param int totalMoves
 */
function showHitDamageVisibilityOnMouseEnter(totalMoves) {
	/** @note this isn't visible on mobile width */
	for (let moveid = 1; moveid <= totalMoves; moveid++) {
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#dmgmove" + moveid).on("mouseenter", function() {
			__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("i#"+this.id+" + div.move-hitdmg").style('display', 'initial');
		});
		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#dmgmove" + moveid).on("mouseleave", function() {
			setTimeout(() => {
				__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("i#"+ this.id + " + div.move-hitdmg").style('display', 'none');
			}, 3000);
		});
	}
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = filterMoveList;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__move_js__ = __webpack_require__(3);


/**
 * @param {object[]} currentMoveList
 * @param {bool} jap
 */
function filterMoveList(currentMoveList, jap, lang, ctrlsMap) {
	let filters  = getFilters();

	return currentMoveList.filter(function(move) {
		let moveString  = Object(__WEBPACK_IMPORTED_MODULE_0__move_js__["a" /* getMoveString */])(move, lang, ctrlsMap);
		let includeMove = true;

		if (filters.moveName) {
			includeMove = includeMove && move.name[jap ? 0 : 1].toLowerCase().match(filters.moveName.toLowerCase());
		}

		if (filters.moveString) {
			includeMove = includeMove && moveString.match(filters.moveString);
		}

		if (filters.specialProperties.spin) {
			includeMove = includeMove && move.b9;
		}

		if (filters.specialProperties.armor) {
			includeMove = includeMove && move.b8;
		}

		if (filters.specialProperties.track) {
			includeMove = includeMove && move.bB;
		}

		if (!isNaN(filters.frameProperties.start.value)) {
			includeMove = includeMove && compare(
				move.s,
				filters.frameProperties.start.value,
				filters.frameProperties.start.comparison
			);
		}

		if (!isNaN(filters.frameProperties.block.value)) {
			includeMove = includeMove && compare(
				move.blk,
				filters.frameProperties.block.value,
				filters.frameProperties.block.comparison
			);
		}

		if (!isNaN(filters.frameProperties.hit.value)) {
			includeMove = includeMove && compare(
				move.adv,
				filters.frameProperties.hit.value,
				filters.frameProperties.hit.comparison
			);
		}

		return includeMove;
	});
}

// impure - document
function getFilters() {
	let moveName = document.querySelector('#move-name-filter').value;
	let moveString = document.querySelector('#move-string-filter').value;
	let specialProperties = {
		spin: document.querySelector('#move-property-spin-filter').checked,
		track: document.querySelector('#move-property-track-filter').checked,
		armor: document.querySelector('#move-property-armor-filter').checked,
	};

	let frameProperties = {
		start: {
			value: document.querySelector('#frame-property-start-filter').value,
			comparison: document.querySelector('#frame-property-start-comparison-filter').value,
		},
		block: {
			value: document.querySelector('#frame-property-block-filter').value,
			comparison: document.querySelector('#frame-property-block-comparison-filter').value,
		},
		hit: {
			value: document.querySelector('#frame-property-hit-filter').value,
			comparison: document.querySelector('#frame-property-hit-comparison-filter').value,
		}
	};

	frameProperties.start.value = parseInt(frameProperties.start.value);
	frameProperties.block.value = parseInt(frameProperties.block.value);
	frameProperties.hit.value = parseInt(frameProperties.hit.value);

	return {
		moveName: moveName,
		moveString: moveString,
		specialProperties: specialProperties,
		frameProperties: frameProperties,
	};
}

function compare(value1, value2, operator) {
	switch (operator) {
		case '<=':
			return value1 <= value2;
		case '<':
			return value1 < value2;
		case '>=':
			return value1 >= value2;
		case '>':
			return value1 > value2;
		default:
			return value1 == value2;
	}
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cookies__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cookies___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cookies__);



class State {
    constructor() {
        this._properties = {
            characterData : [],
        	ctrlsMap : null,
        	hitsMap : [],
            selectedCharacter : "32",
        	currentMoveList : null,
        	lang : 1,
        	langIndex : 0,
        	jap : false,
        	showPrefDialog : false,
        	showFilterDialog : false,
        	showCharMenuDialog : false,
        	buttonLayouts : ["STEAM", "PS4","XBOX"],
        	buttonLayoutChoice : 2,
        };
    }

    get(property) {
        return this._properties[property];
    }

    set(property, value) {
        this._properties[property] = value;
    }

    save() {
        __WEBPACK_IMPORTED_MODULE_1_cookies___default.a.set('tk7moves', JSON.stringify({
    		selected_char: this.get('selectedCharacter'),
    		lang: this.get('lang'),
    		lang_index: this.get('langIndex'),
    		jap: this.get('jap'),
    		bl_choice: this.get('buttonLayoutChoice')
    	}), { expires: 30, path: '' });
    }

    load() {
    	if (typeof __WEBPACK_IMPORTED_MODULE_1_cookies___default.a.get('tk7moves') != 'undefined') {
    	    let buttonLayoutChoice = this.get('buttonLayoutChoice');
    	    let langIndex = this.get('langIndex');

    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#platf-select > option:nth-child("+(buttonLayoutChoice+1)+")").attr("selected",false);
    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#lang-select > option:nth-child("+(langIndex+1)+")").attr("selected",false);

    		var vals = JSON.parse(__WEBPACK_IMPORTED_MODULE_1_cookies___default.a.get('tk7moves'));
    		this.set('selectedCharacter', vals.selected_char);
    		this.set('lang', vals.lang);
    		this.set('langIndex', vals.lang_index);
    		this.set('jap', vals.jap);
    		this.set('buttonLayoutChoice', vals.bl_choice);

    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#platf-select > option:nth-child("+(buttonLayoutChoice+1)+")").attr("selected",true);
    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#lang-select > option:nth-child("+(langIndex+1)+")").attr("selected",true);
    	} else {
    		this.save();
    	}
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = State;


/***/ })
/******/ ]);