/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = d3;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isLetter;
/* harmony export (immutable) */ __webpack_exports__["b"] = loadJson;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);


/**
 * @param {string} char
 * @return {bool}
 */
function isLetter(char) {
    return (typeof char === 'string') && char.toLowerCase() != char.toUpperCase();
}

/**
 * Promise wrapper around d3.json
 * @param {string} path
 * @return {Promise}
 */
function loadJson(path) {
    return new Promise(function(resolve, reject) {
        __WEBPACK_IMPORTED_MODULE_0_d3__["json"](path, function(error, response) {
            if (error) {
                reject(error);
            }

            resolve(response);
        });
    });
}

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getMoveString */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(1);


// impure
function getMoveString(move, lang, ctrlsMap) {
    let moveString = "";
    let commands = move.command[lang].split(" ");

    for (let c = 0; c < commands.length; c++) {
        let command = commands[c];

        if (/[a-z]/.test(command.toLowerCase())) {
            moveString += command;
        } else {
            for (let m = 0; m < command.length; m++) {
                let input = "";
                try {
                    if (Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* isLetter */])(ctrlsMap[command.charAt(m)])) {
                        if (
                            ctrlsMap[command.charAt(m)] === ctrlsMap[command.charAt(m)].toLowerCase() ||
                            ctrlsMap[command.charAt(m)] === "N"
                        ) {
                            input = ctrlsMap[command.charAt(m)].toLowerCase();
                        } else {
                            input = ctrlsMap[command.charAt(m)].toLowerCase();
                        }
                    } else if (!isNaN(ctrlsMap[command.charAt(m)].charAt(0))) {
                        input = ctrlsMap[command.charAt(m)];
                    }
                } catch (exception) {
                }

                moveString += input;
            }
        }
    }

    return moveString;
}

class Move {
    constructor(moveData, language, controlsMap, hitsMap) {
        this._moveData = moveData;
        this._language = language;
        this._isJapanese = language === 0;
        this._controlsMap = controlsMap;
        this._hits = this._moveData.at.map((hit) => new Hit(hit, hitsMap));
        this._commands = this._moveData
            .command[this._language]
            .split(" ")
            .map((cmd) => new Command(cmd, controlsMap));
    }

    getName() {
        return this._moveData.name[this._isJapanese ? 0 : 1];
    }

    getNumber() {
        return this._moveData.number;
    }

    getTotalHits() {
        return this._moveData.ds.length;
    }

    getHits() {
        return this._hits;
    }

    getTotalDamage() {
        return this._moveData.d;
    }

    getDamages() {
        return this._moveData.ds.map(damage => damage.d);
    }

    getCommands() {
        return this._commands;
    }

    getString() {
        return getMoveString(this._moveData, this._language, this._controlsMap);
    }

    hasThrow() {
        return this._moveData.br.length > 0;
    }

    getThrowBreak() {
        switch (this._moveData.br[0].b) {
            case 1:
                return "1";
            case 2:
                return "2";
            case 3:
                return "1/2";
            case 4:
                return "1+2";
            default:
                return "";
        }
    }

    getThrowBreakFrames() {
        return this._moveData.br[0].f;
    }

    getStartUpFrames() {
        return this._moveData.s;
    }

    hasSegmentedStartFrames() {
        return this._moveData.s > 0;
    }

    getSegmentedStartFrames() {
        return this._moveData.ss.slice(1).map(sfs => sfs.s);
    }

    getBlockFrames() {
        return this._moveData.blk;
    }

    getAdvantageFrames() {
        return this._moveData.adv;
    }

    hasSpin() {
        return this._moveData.b9;
    }

    hasArmor() {
        return this._moveData.b8;

    }

    hasTracking() {
        return this._moveData.bB;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Move;


class Command {
    constructor(command, controlsMap) {
        this._command = command;
        this._controlsMap = controlsMap;
        this._inputs = command
            .split("")
            .map((char) => new Input(char, controlsMap[char]));
    }

    getSymbol() {
        return this._command;
    }

    hasLetter() {
        return /[a-z]/.test(this._command.toLowerCase());
    }

    isBracket() {
        return this._command === "(" || this.__command === ")";
    }

    getInputs() {
        return this._inputs;
    }
}

class Input {
    constructor(charData, inputData) {
        this._charData  = charData;
        this._inputData = inputData;
    }

    getSymbol() {
        return this._inputData || this._charData;
    }

    isLetter() {
        return (typeof this._inputData === 'string') &&
                this._inputData.toLowerCase() != this._inputData.toUpperCase();
    }

    isMovement() {
        return this._inputData && this.isLetter();
    }

    isNeutral() {
        return this._inputData === "N";
    }

    isHeld() {
        return this._inputData && this._inputData === this._inputData.toUpperCase();
    }

    isAttack() {
        return this._inputData && this._inputData && !isNaN(this._inputData.charAt(0));
    }
}

class Hit {
    constructor(hitData, hitsMap) {
        this._hitData = hitData;
        this._hitsMap = hitsMap;
    }

    getLevel() {
        return this._hitsMap[this._hitData.l];
    }

    isThrow() {
        return this._hitData.t > 0;
    }
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__view_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__filters_js__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__state_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__move_js__ = __webpack_require__(2);
/*!
 * =============================
 * =	Mike Pinto             =
 * =	mspkvp@github.com      =
 * =	Â©2017 tk7movespretty   =
 * ============================= */






(function(exports) {

'use strict';

let state = new __WEBPACK_IMPORTED_MODULE_3__state_js__["a" /* default */]();

function setLang(selectedLanguage) {
    state.set('lang', parseInt(selectedLanguage));
    state.save();
    fetchMoveList(state.get('selectedCharacter'));
}

function changePlatform(platform) {
    state.set('buttonLayout', platform);
    state.save();
    fetchMoveList(state.get('selectedCharacter'));
}

function togglePreferences() {
    toggleDialog('#preferences', 'showPrefDialog');
}

function toggleFilter() {
    toggleDialog('#filter', 'showFilterDialog');
}

function toggleDialog(selector, stateProperty) {
    let value = state.get(stateProperty);

    if (value) {
        showDialog(selector);
    } else {
        hideDialog(selector);
    }

    state.set(stateProperty, !value);
}

function showDialog(selector) {
    document.querySelector(selector).style.visibility = 'hidden';
}

function hideDialog(selector) {
    document.querySelector(selector).style.visibility = 'visible';
}

function toggleCharMenu() {
    let showCharMenuDialog = state.get('showCharMenuDialog');

    if (showCharMenuDialog) {
        document.querySelector('#charmenu').style.display = 'none';
    } else {
        document.querySelector('#charmenu').style.display = 'initial';
    }

    state.set('showCharMenuDialog', !showCharMenuDialog);
}

function importData() {
    state.load();

    loadHitsMap()
    .then(() => loadControlsMap())
    .then(() => loadCharacterList())
    .then(() => fetchMoveList(state.get('selectedCharacter')));
}

function loadHitsMap() {
    return Object(__WEBPACK_IMPORTED_MODULE_2__utils_js__["b" /* loadJson */])("./assets/data/map_hits.json")
    .then((data) => {
        let hitsMap = {};

        for (var h in data) {
            hitsMap[data[h].i] = data[h].h;
        }

        state.set('hitsMap', hitsMap);

        return hitsMap;
    });
}

function loadControlsMap() {
    return Object(__WEBPACK_IMPORTED_MODULE_2__utils_js__["b" /* loadJson */])("./assets/data/map_ctrls.json")
    .then((ctrlsMap) => {
        state.set('ctrlsMap', ctrlsMap);
        return ctrlsMap;
    });
}

function loadCharacterList() {
    return Object(__WEBPACK_IMPORTED_MODULE_2__utils_js__["b" /* loadJson */])("./assets/data/map_chars.json")
    .then((data) => {
        let characterData = [];

        for (let h in data) {
            characterData[data[h].i] = {
                c: data[h].c,
                n: data[h].n,
                c_index: data[h].c_index,
                i: data[h].i,
            };
        }

        state.set('characterData', characterData);

        return characterData;
    });
}

function sortCharacterList(characterList) {
    let sortedList = [];

    // This accomodates for characters with leading zeros for IDs
    for (let h in characterList) {
        sortedList[parseInt(h)] = characterList[h];
    }

    return sortedList.sort((characterA, characterB) => {
        return characterA.c_index.localeCompare(characterB.c_index);
    });
}

function loadMoveList(characterIndex) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__utils_js__["b" /* loadJson */])("./assets/data/movelists/MOVELIST_" + characterIndex + ".json")
        .then(parseMoveList);
}

function parseMoveList(data) {
    let hitsMap  = state.get('hitsMap');
    let lang     = state.get('lang');
    let ctrlsMap = state.get('ctrlsMap');

    return data.moves.map((move) => {
        return new __WEBPACK_IMPORTED_MODULE_4__move_js__["a" /* default */](move, lang, ctrlsMap, hitsMap);
    });
}

function fetchMoveList(characterIndex) {
    return loadMoveList(characterIndex)
    .then((moves) => {
        state.set('selectedCharacter', characterIndex);
        state.set('currentMoveList', moves);
        state.save();

        let characterList = state.get('characterData');

        __WEBPACK_IMPORTED_MODULE_0__view_js__["c" /* renderSelectedCharacterName */](characterList[characterIndex].n);
        __WEBPACK_IMPORTED_MODULE_0__view_js__["a" /* renderCharacterList */](sortCharacterList(characterList), characterIndex);
        __WEBPACK_IMPORTED_MODULE_0__view_js__["b" /* renderMoveList */](moves, state.get('buttonLayout'));
    }).catch((error) => {
        console.log(
            `Failed to render movelist for character ${characterIndex}`,
            error
        );
    });
}

function filterMoveList() {
    let filteredMoveList = __WEBPACK_IMPORTED_MODULE_1__filters_js__["a" /* filterMoveList */](state.get('currentMoveList'));

    __WEBPACK_IMPORTED_MODULE_0__view_js__["b" /* renderMoveList */](filteredMoveList, state.get('buttonLayout'));
}

exports.importData        = importData;
exports.toggleCharMenu    = toggleCharMenu;
exports.togglePreferences = togglePreferences;
exports.toggleFilter	  = toggleFilter;
exports.filterMoveList    = filterMoveList;
exports.setLang           = setLang;
exports.changePlatform    = changePlatform;
exports.fetchMoveList     = fetchMoveList;

})(window);

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = renderCharacterList;
/* harmony export (immutable) */ __webpack_exports__["c"] = renderSelectedCharacterName;
/* harmony export (immutable) */ __webpack_exports__["b"] = renderMoveList;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__move_js__ = __webpack_require__(2);




function renderCharacterList(characters, selectedCharacter) {
    let characterListTable = document.querySelector(".char-menu > .inner-table > table");

    function renderCharacterCard(character, index) {
        let tname       = character.c_index.split(" ");
        let characterId = character.c.split(" ")[0];
        let selected    = character.i === selectedCharacter ? 'selected' : '';

        // Special case for JACK-7
        if (character.i == "11") {
            tname = character.c.split("-");
        }

        return `
        <tr>
            <td class="char-card ${selected}" id="${characterId}" onclick="fetchMoveList('${character.i}')">
                <img src="./assets/chars/${tname.join("").toLowerCase()}_thumbnail.png">
                <p>${character.c}</p>
            </td>
        </tr>
        `;
    }

    characterListTable.innerHTML = characters.map(renderCharacterCard).join("");
}

function renderSelectedCharacterName(characterName) {
    let characterTitle = document.querySelector('#selected-title');
    characterTitle.innerHTML = characterName;
}

function renderMoveList(moves, buttonLayout) {
    let totalMoves = 0;
    let moveTable = __WEBPACK_IMPORTED_MODULE_0_d3__["select"](".move-table");
    moveTable.html("");

    moves.map((move) => {
        let isSpecialMove = !move.getNumber() > 0;
        let tableRow      = moveTable.append("tr");

        if (isSpecialMove) {
            tableRow.html(renderSpecialMoveCard(move));
        } else {
            totalMoves++;
            tableRow.html(renderMoveCard(move, buttonLayout));
        }
    });

    // Hit damage
    showHitDamageVisibilityOnMouseEnter(totalMoves);

    // Scroll the list to the top
    let table = document.querySelector("#movelist_tab > table");
    let firstElementChild = table.firstElementChild;

    if (firstElementChild) {
        firstElementChild.scrollIntoView(true);
    }
}

function renderSpecialMoveCard(move, jap) {
    return `
    <td class="move-card">
        <div class="move-info">
            <div class="move-number">&#9733;</div>
            <div class="move-title">
                <div class="move-name" style="margin-bottom:5px;">
                    ${move.getName()}
                </div>
            </div>
        </div>
    </td>
    `;
}

function renderMoveCard(move, buttonLayout) {
    return `
    <td class="move-card">
        ${renderMoveInfo(move, buttonLayout)}
        ${renderMoveExtra(move)}
    </td>
    `;
}

function renderMoveInfo(move, buttonLayout) {
    return `
    <div class="move-info">
        <div class="move-number">${move.getNumber()}</div>
        <div class="move-title">
            <div class="move-name">${move.getName()}</div>
            <div class="move-hitamount">
                ${move.getTotalHits()} ${move.getHits().length ? " Hits" : " Hit"}
            </div>
        </div>
        ${renderMoveString(move, buttonLayout)}
        ${renderMoveHitDamage(move)}
    </div>
    `;
}

function renderMoveString(move, buttonLayout) {
    return `
    <div class="move-string">
        ${move.getCommands().map((command) => {
            if (command.hasLetter()) {
                return renderMoveHint(command.getSymbol() || "");
            } else {
                return renderMoveCommand(command, buttonLayout);
            }
        }).join("")}
    </div>
    `;
}

function renderMoveHint(hint) {
    return `<p class="move-hint">${hint}</p>`;
}

function renderMoveCommand(command, buttonLayout) {
    return command.getInputs().map((input) => {
        if (input.isMovement() || input.isNeutral()) {
            return `<img class="move-arrow" src="./assets/arrow/${input.getSymbol().toLowerCase()}.svg">`;
        } else if (input.isMovement() && input.isHeld()) {
            return `<img class="move-arrow" src="./assets/arrow/${input.getSymbol().toLowerCase()}p.svg">`;
        } else if (input.isAttack()) {
            return `<img class="move-button" src="./assets/button/${buttonLayout}/${input.getSymbol()}.svg">`;
        } else if (input.getSymbol() === ">") {
            return `
            <p class="move-hint" style="color:#37ff05;font-size:20px;">
                <i class="fa fa-chevron-right" aria-hidden="true"></i>
            </p>`;
        } else {
            return renderMoveHint(input.getSymbol());
        }
    }).join("");
}

/**
 * @param selectedCharacterIndex
 * @param move
 * @param hitsMap
 * @return string
 */
function renderMoveHitDamage(move) {
    return `
    <div class="move-hit-dmg">
        <div class="move-hitlvlstring">
            ${renderMoveHitLevels(move)}
            ${move.hasThrow() ? renderThrowBreaks(move) : ``}
        </div>
        ${renderMoveDamage(move)}
    </div>
    `;
}

function renderMoveHitLevels(move) {
    return move.getHits()
        .map((hit) => renderMoveHitLevel(hit.getLevel(), (hit.isThrow() ? "Throw" : "")))
        .join(`<i class="fa fa-chevron-right" aria-hidden="true"></i>`);
}

function renderMoveHitLevel(hitLevel, hitType) {
    return `
    <p class="mv-hitlvl hit${hitLevel.toLowerCase()}">
        ${hitLevel} ${hitType}
    </p>
    `;
}

function renderMoveDamage(move) {
    return `
    <div class="move-dmg">
        <p class="mv-frames">${move.getTotalDamage()}</p>
        <p class="mv-id">Damage</p>
        <div class="move-hitdmg-section">
            <i id="dmgmove${move.getNumber()}" class="fa fa-plus-square" aria-hidden="true"></i>
            <div class="move-hitdmg">
                ${move.getDamages().join("+")}
            </div>
        </div>
    </div>
    `;
}

function renderThrowBreaks(move) {
    return `
    <i class="fa fa-caret-right" aria-hidden="true"></i>
    <p class="mv-hitlvl">
        ${move.getThrowBreakFrames()}F BREAK ${move.getThrowBreak()}
    </p>
    `
}

function renderMoveFrames(move) {
    return `
    <table class="move-frames">
        <tr class="move-startf">
            <td class="mv-id">Start</td>
            <td class="mv-frames">
                ${move.getStartUpFrames()}F
            </td>
        </tr>

        ${move.getStartUpFrames() > 0 ? renderStartFramesSegmented(move) : ""}

        <tr class="move-blockf">
            <td class="mv-id">Block</td>
            <td class="mv-frames ${move.getBlockFrames() > -1 ? "blkpositive" : move.getBlockFrames() < -10 ? "blknegative" : "blkmild"}">
                ${(move.getBlockFrames() > -1 ? "+" : "" ) + move.getBlockFrames()}
            </td>
        </tr>
        <tr class="move-hitf">
            <td class="mv-id">Hit</td>
            <td class="mv-frames">
                ${(move.getAdvantageFrames() > 0 ? "+" : "") + move.getAdvantageFrames()}
            </td>
        </tr>
    </table>
    `;
}

function renderStartFramesSegmented(move) {
    return `
    <tr class="move-startf-seg">
        <td>
            ${move.getStartUpFrames()}F = ${move.getSegmentedStartFrames().join("+")}
        </td>
    </tr>`;
}

function renderMoveExtra(move) {
    return `
    <div class="move-extra">
        <div class="mv-section">
            <div class="move-special">
                ${ move.hasSpin() ? `<p class="spin">SPIN</p>` : `` }
                ${ move.hasArmor() ? `<p class="armor">ARMOR</p>` : `` }
                ${ move.hasTracking() ? `<p class="track">TRACK</p>` : `` }
            </div>
            ${renderMoveFrames(move)}
        </div>
    </div>
    `;
}

/**
 * @param int totalMoves
 */
function showHitDamageVisibilityOnMouseEnter(totalMoves) {
    /** @note this isn't visible on mobile width */
    for (let moveid = 1; moveid <= totalMoves; moveid++) {
        __WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#dmgmove" + moveid).on("mouseenter", function() {
            __WEBPACK_IMPORTED_MODULE_0_d3__["select"]("i#"+this.id+" + div.move-hitdmg").style('display', 'initial');
        });
        __WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#dmgmove" + moveid).on("mouseleave", function() {
            setTimeout(() => {
                __WEBPACK_IMPORTED_MODULE_0_d3__["select"]("i#"+ this.id + " + div.move-hitdmg").style('display', 'none');
            }, 3000);
        });
    }
}


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = filterMoveList;
/**
 * @param {Move[]} moves
 * @return {Move[]}
 */
function filterMoveList(moves) {
	let filters = getFilters();

	return moves.filter(function(move) {
		let moveString = move.getString();
		let includeMove = true;

		if (filters.moveName) {
			includeMove = includeMove && move.getName().toLowerCase().match(filters.moveName.toLowerCase());
		}

		if (filters.moveString) {
			includeMove = includeMove && moveString.match(filters.moveString);
		}

		if (filters.specialProperties.spin) {
			includeMove = includeMove && move.hasSpin();
		}

		if (filters.specialProperties.armor) {
			includeMove = includeMove && move.hasArmor();
		}

		if (filters.specialProperties.track) {
			includeMove = includeMove && move.hasTracking();
		}

		if (!isNaN(filters.frameProperties.start.value)) {
			includeMove = includeMove && compare(
				move.getStartUpFrames(),
				filters.frameProperties.start.value,
				filters.frameProperties.start.comparison
			);
		}

		if (!isNaN(filters.frameProperties.block.value)) {
			includeMove = includeMove && compare(
				move.getBlockFrames(),
				filters.frameProperties.block.value,
				filters.frameProperties.block.comparison
			);
		}

		if (!isNaN(filters.frameProperties.hit.value)) {
			includeMove = includeMove && compare(
				move.getAdvantageFrames(),
				filters.frameProperties.hit.value,
				filters.frameProperties.hit.comparison
			);
		}

		return includeMove;
	});
}

// impure - document
function getFilters() {
	let moveName = document.querySelector('#move-name-filter').value;
	let moveString = document.querySelector('#move-string-filter').value;
	let specialProperties = {
		spin: document.querySelector('#move-property-spin-filter').checked,
		track: document.querySelector('#move-property-track-filter').checked,
		armor: document.querySelector('#move-property-armor-filter').checked,
	};

	let frameProperties = {
		start: {
			value: document.querySelector('#frame-property-start-filter').value,
			comparison: document.querySelector('#frame-property-start-comparison-filter').value,
		},
		block: {
			value: document.querySelector('#frame-property-block-filter').value,
			comparison: document.querySelector('#frame-property-block-comparison-filter').value,
		},
		hit: {
			value: document.querySelector('#frame-property-hit-filter').value,
			comparison: document.querySelector('#frame-property-hit-comparison-filter').value,
		}
	};

	frameProperties.start.value = parseInt(frameProperties.start.value);
	frameProperties.block.value = parseInt(frameProperties.block.value);
	frameProperties.hit.value   = parseInt(frameProperties.hit.value);

	return {
		moveName: moveName,
		moveString: moveString,
		specialProperties: specialProperties,
		frameProperties: frameProperties,
	};
}

function compare(value1, value2, operator) {
	switch (operator) {
		case '<=':
			return value1 <= value2;
		case '<':
			return value1 < value2;
		case '>=':
			return value1 >= value2;
		case '>':
			return value1 > value2;
		default:
			return value1 == value2;
	}
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_d3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cookies__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cookies___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cookies__);



class State {
    constructor() {
        this._properties = {
            characterData : [],
        	ctrlsMap : null,
        	hitsMap : [],
            selectedCharacter : "32",
        	currentMoveList : null,
        	lang : 1,
        	showPrefDialog : false,
        	showFilterDialog : false,
        	showCharMenuDialog : false,
        	buttonLayout: "XBOX",
        };
    }

    get(property) {
        return this._properties[property];
    }

    set(property, value) {
        this._properties[property] = value;
    }

    save() {
        __WEBPACK_IMPORTED_MODULE_1_cookies___default.a.set('tk7moves', JSON.stringify({
    		selected_char: this.get('selectedCharacter'),
    		lang: this.get('lang'),
    		jap: this.get('jap'),
    		bl_choice: this.get('buttonLayoutChoice'),
    		button_layout: this.get('buttonLayout'),
    	}), { expires: 30, path: '' });
    }

    load() {
    	if (typeof __WEBPACK_IMPORTED_MODULE_1_cookies___default.a.get('tk7moves') != 'undefined') {
    	    let vals = JSON.parse(__WEBPACK_IMPORTED_MODULE_1_cookies___default.a.get('tk7moves'));
    	    let buttonLayoutChoice = vals.bl_choice;
    	    let lang = vals.lang;
    	    let jap = vals.jap;
            let selectedCharacter = vals.selected_char;
            let buttonLayout = vals.button_layout;

    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#platf-select option").attr("selected", false);
    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"]("#lang-select option").attr("selected", false);

    		this.set('selectedCharacter', selectedCharacter);
    		this.set('lang', lang);
    		this.set('jap', jap);
    		this.set('buttonLayoutChoice', buttonLayoutChoice);
    		this.set('buttonLayout', buttonLayout);

    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"](`#platf-select option[value="${buttonLayout}"]`).attr("selected", true);
    		__WEBPACK_IMPORTED_MODULE_0_d3__["select"](`#lang-select option[value="${lang}"]`).attr("selected", true);
    	} else {
    		this.save();
    	}
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = State;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = Cookies;

/***/ })
/******/ ]);